version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: saas_ecommerce_postgres_staging
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-saas_ecommerce_staging}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_staging:/var/lib/postgresql/data
    networks:
      - saas_network_staging
    restart: unless-stopped

  # Banco de dados MongoDB
  mongodb:
    image: mongo:6-jammy
    container_name: saas_ecommerce_mongodb_staging
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-mongodb}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-mongodb}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE:-saas_ecommerce_staging}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data_staging:/data/db
    networks:
      - saas_network_staging
    restart: unless-stopped

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: saas_ecommerce_redis_staging
    ports:
      - "6379:6379"
    volumes:
      - redis_data_staging:/data
    networks:
      - saas_network_staging
    restart: unless-stopped

  # Message Broker RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: saas_ecommerce_rabbitmq_staging
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-rabbitmq}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-rabbitmq}
    ports:
      - "5672:5672"  # AMQP
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data_staging:/var/lib/rabbitmq
    networks:
      - saas_network_staging
    restart: unless-stopped

  # Serviço de Autenticação
  auth-service:
    image: ${DOCKERHUB_USERNAME:-saas-ecommerce}/saas-ecommerce-auth-service:${TAG:-latest}
    container_name: auth_service_staging
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=staging
      - PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_DATABASE=auth_service_staging
      - JWT_SECRET=${JWT_SECRET:-staging-secret}
      - JWT_EXPIRATION=1d
      - RABBITMQ_URL=amqp://rabbitmq
    ports:
      - "3001:3001"
    networks:
      - saas_network_staging
    restart: unless-stopped

  # API Gateway
  api-gateway:
    image: ${DOCKERHUB_USERNAME:-saas-ecommerce}/saas-ecommerce-api-gateway:${TAG:-latest}
    container_name: api_gateway_staging
    depends_on:
      - auth-service
      - catalog-service
      - checkout-service
      - payments-service
    environment:
      - NODE_ENV=staging
      - PORT=3000
      - AUTH_SERVICE_URL=http://auth-service:3001
      - CATALOG_SERVICE_URL=http://catalog-service:3002
      - CHECKOUT_SERVICE_URL=http://checkout-service:3003
      - PAYMENTS_SERVICE_URL=http://payments-service:3004
    ports:
      - "3000:3000"
    networks:
      - saas_network_staging
    restart: unless-stopped

  # Serviço de Catálogo
  catalog-service:
    image: ${DOCKERHUB_USERNAME:-saas-ecommerce}/saas-ecommerce-catalog-service:${TAG:-latest}
    container_name: catalog_service_staging
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      - NODE_ENV=staging
      - PORT=3002
      - MONGODB_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME:-mongodb}:${MONGO_INITDB_ROOT_PASSWORD:-mongodb}@mongodb:27017/${MONGO_INITDB_DATABASE:-saas_ecommerce_staging}?authSource=admin
      - RABBITMQ_URL=amqp://rabbitmq
    networks:
      - saas_network_staging
    restart: unless-stopped

  # Serviço de Checkout
  checkout-service:
    image: ${DOCKERHUB_USERNAME:-saas-ecommerce}/saas-ecommerce-checkout-service:${TAG:-latest}
    container_name: checkout_service_staging
    depends_on:
      - postgres
      - mongodb
      - redis
      - rabbitmq
    environment:
      - NODE_ENV=staging
      - PORT=3003
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_DATABASE=checkout_service_staging
      - MONGODB_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME:-mongodb}:${MONGO_INITDB_ROOT_PASSWORD:-mongodb}@mongodb:27017/${MONGO_INITDB_DATABASE:-saas_ecommerce_staging}?authSource=admin
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://rabbitmq
    networks:
      - saas_network_staging
    restart: unless-stopped

  # Serviço de Pagamentos
  payments-service:
    image: ${DOCKERHUB_USERNAME:-saas-ecommerce}/saas-ecommerce-payments-service:${TAG:-latest}
    container_name: payments_service_staging
    depends_on:
      - postgres
      - rabbitmq
    environment:
      - NODE_ENV=staging
      - PORT=3004
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_DATABASE=payments_service_staging
      - RABBITMQ_URL=amqp://rabbitmq
      - ASAAS_API_KEY=${ASAAS_API_KEY}
      - ASAAS_API_URL=${ASAAS_API_URL:-https://sandbox.asaas.com/api/v3}
    networks:
      - saas_network_staging
    restart: unless-stopped

  # Monitoramento (opcional para staging)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_staging
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data_staging:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - saas_network_staging
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_staging
    depends_on:
      - prometheus
    ports:
      - "3005:3000"
    volumes:
      - grafana_data_staging:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - saas_network_staging
    restart: unless-stopped

networks:
  saas_network_staging:
    driver: bridge

volumes:
  postgres_data_staging:
  mongodb_data_staging:
  redis_data_staging:
  rabbitmq_data_staging:
  prometheus_data_staging:
  grafana_data_staging:
