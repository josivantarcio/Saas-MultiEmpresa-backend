name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  IMAGE_PREFIX: saas-ecommerce

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      mongodb:
        image: mongo:6-jammy
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./backend
    
    - name: Run tests
      run: npm test
      working-directory: ./backend
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: test
        DB_PASSWORD: test
        DB_DATABASE: test
        JWT_SECRET: test-secret
        MONGO_URI: mongodb://localhost:27017/test

  build-and-push:
    name: Build and Push Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push API Gateway
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./api-gateway/Dockerfile
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}-api-gateway:latest
          ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}-api-gateway:${{ github.sha }}
    
    - name: Build and push Auth Service
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        file: ./microservices/auth/Dockerfile
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}-auth-service:latest
          ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}-auth-service:${{ github.sha }}
    
    # Adicione etapas semelhantes para os outros servi√ßos (catalog, checkout, payments)
    - name: Build and push Catalog Service
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        file: ./microservices/catalog/Dockerfile
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}-catalog-service:latest
          ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}-catalog-service:${{ github.sha }}
    
    - name: Build and push Checkout Service
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        file: ./microservices/checkout/Dockerfile
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}-checkout-service:latest
          ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}-checkout-service:${{ github.sha }}
    
    - name: Build and push Payments Service
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        file: ./microservices/payments/Dockerfile
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}-payments-service:latest
          ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}-payments-service:${{ github.sha }}

  deploy-staging:
    name: Deploy to Staging
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
    
    - name: Deploy to Staging
      run: |
        ssh -o StrictHostKeyChecking=no \
            -p ${{ secrets.STAGING_SSH_PORT }} \
            ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_SERVER }} \
            "cd /path/to/app && \
             git pull origin develop && \
             docker-compose -f docker-compose.staging.yml pull && \
             docker-compose -f docker-compose.staging.yml up -d --build"

  deploy-production:
    name: Deploy to Production
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
    
    - name: Deploy to Production
      run: |
        ssh -o StrictHostKeyChecking=no \
            -p ${{ secrets.PROD_SSH_PORT }} \
            ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SERVER }} \
            "cd /path/to/app && \
             git pull origin main && \
             docker-compose -f docker-compose.prod.yml pull && \
             docker-compose -f docker-compose.prod.yml up -d --build"
